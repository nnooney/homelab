---
# Prepares security credentials for Consul.
#
# All credentials are created on consul_prime and cached via temporary facts.
# Other server and client nodes obtain the credentials from the cached facts.
# Files are copied between nodes through the ansible controller node (the
# machine running this role).

################################################################################
# Gossip Encryption Key
#
# The gossip encryption key is a symmetric key used to encrypt communications
# between all consul agents. In this role, it is represented by the variable
# `consul_gossip_key`.
#
# The gossip encryption key is not persisted locally; it is retrieved from the
# consul_prime's configuration file and remembered via the `set_fact` task. This
# avoids the need to handle the key at rest.
################################################################################

# Query consul_prime for an already-existing gossip encryption key.
- block:
  - name: Obtain consul_prime configuration
    ansible.builtin.slurp:
      path: /etc/consul.d/security.json
    register: consul_security_config_b64
    ignore_errors: true
    delegate_to: "{{ consul_prime }}"
    become: true

  - name: Deserialize consul_prime configuration
    ansible.builtin.set_fact:
      consul_security_config: "{{ consul_security_config_b64.content | b64decode | from_json }}"
    when: consul_security_config_b64.content is defined

  - name: Retrieve gossip encryption key from consul_prime configuration
    ansible.builtin.set_fact:
      consul_gossip_key: "{{ consul_security_config.encrypt }}"
    when: consul_security_config is defined

  no_log: true

# If no existing gossip encryption key is found, then generate it on the prime
# node.
- block:
  - name: Generate gossip encryption key
    ansible.builtin.command:
      cmd: consul keygen
      # Created key is written to stdout
    register: consul_keygen

  - name: Set gossip encryption key fact
    ansible.builtin.set_fact:
      consul_gossip_key: "{{ consul_keygen.stdout }}"

  no_log: true
  when:
    - not consul_gossip_key is defined
    - consul_cluster_role in ['prime']

# If the gossip encryption key is not defined at this point, then return an
# error.
- name: Fail if unable to determine gossip encryption key
  ansible.builtin.fail:
    msg: "Error: Could not locate gossip encryption key."
  when: not consul_gossip_key is defined

################################################################################
# TLS Certificates for RPC encryption.
#
# Consul can veriify the authenticity of servers and clients with TLS
# certificates signed by a single certificate authority.
#
# The built-in CA for consul is used to generate certificates on consul_prime;
# other nodes will then retrieve the respective certificates from there. This
# role sets up a single CA only (as opposed to a federated/third party CA).
################################################################################

# Create a directory to hold TLS certificates.
- name: Create TLS directory
  ansible.builtin.file:
    path: /etc/consul.d/tls
    state: directory
    owner: consul
    group: consul
    mode: 0755
  become: true


# Create CA certificates and server TLS certificates for consul_prime.
- block:
    # Create a CA. This step generates 2 files:
    #  - consul-agent-ca.pem: must be distributed to every consul agent.
    #  - consul-agent-ca-key.pem: must be kept private.
  - name: Generate CA keypair
    ansible.builtin.command:
      chdir: /etc/consul.d/tls
      cmd: consul tls ca create
      # Optionally specify a domain with the command line flag -domain. Defaults
      # to 'consul'. The domain configures which DNS queries consul responds to,
      # and therefore will not be recursively resolved.
      creates: /etc/consul.d/tls/consul-agent-ca-key.pem
    become: true

  - name: Update ownership of consul-agent-ca.pem
    ansible.builtin.file:
      path: /etc/consul.d/tls/consul-agent-ca.pem
      owner: consul
      group: consul
      # Leave the mode unchanged (use the consul command defaults).
    become: true

  - name: Update ownership of consul-agent-ca-key.pem
    ansible.builtin.file:
      path: /etc/consul.d/tls/consul-agent-ca-key.pem
      owner: consul
      group: consul
      # Leave the mode unchanged (use the consul command defaults).
    become: true

    # Create a server TLS cert for consul_prime. This step generates 2 files:
    #  - <dc>-server-consul-0.pem: must be held by consul_prime only.
    #  - <dc>-server-consul-0-key.pem: must be kept private.
    #
    # The Common Name and Subject Alternative Name in the certificate contain
    # 'server.<dc>.consul'. This certificate is used with the config value
    # 'verify_server_hostname' to enforce only a subset of consul agents that
    # are allowed to boot in the server role.
  - name: Generate server certificate for consul_prime
    ansible.builtin.command:
      chdir: /etc/consul.d/tls
      cmd: consul tls cert create -server -dc nooncasa
      # Optionally specify a domain with the command line flag -domain. Defaults
      # to 'consul'. The domain configures which DNS queries consul responds to,
      # and therefore will not be recursively resolved.
      creates: /etc/consul.d/tls/nooncasa-server-consul-0-key.pem
    become: true

  - name: Update ownership of nooncasa-server-consul-0.pem
    ansible.builtin.file:
      path: /etc/consul.d/tls/nooncasa-server-consul-0.pem
      owner: consul
      group: consul
      # Leave the mode unchanged (use the consul command defaults).
    become: true

  - name: Update ownership of nooncasa-server-consul-0-key.pem
    ansible.builtin.file:
      path: /etc/consul.d/tls/nooncasa-server-consul-0-key.pem
      owner: consul
      group: consul
      # Leave the mode unchanged (use the consul command defaults).
    become: true

  when:
    - consul_cluster_role in ['prime']

# Obtain the CA public key from consul_prime. Inter-node communication is not
# enabled, so the certificate is copied through the ansible controller node (the
# machine running this role).
- name: Obtain the CA certificate from consul_prime
  ansible.builtin.fetch:
    src: /etc/consul.d/tls/consul-agent-ca.pem
    dest: "{{ playbook_dir }}/keys/"
    flat: true
  when: consul_cluster_role in ['prime']

- name: Distribute the CA certificate to other nodes
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/keys/consul-agent-ca.pem"
    dest: /etc/consul.d/tls/consul-agent-ca.pem
    owner: consul
    group: consul
    mode: 0644
  when: consul_cluster_role in ['servers', 'clients']
  become: true

# TODO: Create server TLS certs for the server nodes on consul_prime

################################################################################
# Security configuration
################################################################################

# Create a security.json configuration reflecting the settings encoded here.
- name: Copy security configuration to node
  ansible.builtin.template:
    src: security.json.j2
    dest: /etc/consul.d/security.json
    owner: consul
    group: consul
    mode: 0640
  become: true
